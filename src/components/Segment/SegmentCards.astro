---
import { Image } from "astro:assets";
import type { SegmentProps } from "./Segment.astro";
import SegmentForm from "./SegmentForm.astro";
import { generateLorem } from "@/helpers";
import { Button } from "../ui/Button";
import colorThemes from "../ui/Color/data";
import Spacer from "../ui/Spacer.astro";
("@/components/ui/Color/data");

interface Props extends SegmentProps<"text"> {}
const {
  /**
   *
   *
   *
   *
   *
   *
   * FORM PROPS
   */
  input,
  button,
  form,
  label,
  /**
   *
   *
   *
   *
   *
   *
   * SHARED PROPS
   */
  title,
  subtitle,
  text,
  theme = "light",
  article,
  card,
  /**
   *
   *
   *
   *
   *
   *
   * TEXT PROPS
   */
} = Astro.props;

let imgPath = "";
let images: Record<
  string,
  () => Promise<{
    default: ImageMetadata;
  }>
> = {};

if (title?.icon) {
  imgPath = `/src/assets/flat-trees/${title?.icon}`;
  // import all images in the assets folder as a glob
  images = import.meta.glob<{ default: ImageMetadata }>("/src/assets/flat-trees/*.*");
  if (!images[imgPath]) throw new Error(`"${imgPath}" does not exist in glob: "/src/assets/flat-trees/*.*"`);
}

const cardClass =
  "backdrop-filter backdrop-blur-sm bg-gradient-to-b from-slate-300/90 to-slate-400/90 hover:ring-2 hover:ring-stone-900/50 transition-all dark:from-slate-800/90 dark:to-slate-900/90 shadow-sm rounded-lg py-5";

const bezier = "cubic-bezier(.25,.75,.5,1.05)";

const duration = "0.5s";
---

<script>
  import { setupIntersectionObserver } from "@/helpers";
  // --
  const elements = Array.from(document.querySelectorAll("[data-is='card-article-wrapper']")) as HTMLElement[];
  const onIntersect = (element: HTMLElement) => element.classList.add("animate-fade-in-card");

  elements.map((element) => {
    setupIntersectionObserver({
      element,
      debugLog: "image",
      onIntersect: () => {
        onIntersect(element);
      },
      threshold: parseInt(element?.dataset?.threshold ?? "") || 0.5,
    });
  });
</script>

<style define:vars={{ bezier, duration }}>
  [data-is="card-article-wrapper"].animate-fade-in-card {
    animation: fadeIn var(--duration) var(--bezier);
    animation-fill-mode: forwards;
  }

  [data-focus]:where(:focus-within) [data-is="header-card-icon"] {
    animation: float 2s infinite var(--bezier);
  }

  article[data-is="card-article-wrapper"]:hover {
    padding-right: 50%;
  }

  article[data-is="card-article-wrapper"]:hover [data-is="card-article-button"] {
    position: absolute;
    display: block;
    right: 0;
    max-width: 10ch;
  }

  /** 
  focused element */

  [data-focus] {
    transition: all 0.3s var(--bezier);
  }

  [data-focus]:focus-within {
    --translationX: calc(-100% * var(--rankX));
    --translationY: calc(-90% * var(--rankY));
    transform: translate(var(--translationX), var(--translationY));
    transition: transform 0.3s var(--bezier);
  }

  /**
  targeting all next siblings */
  [data-focus]:focus-within ~ [data-focus],
  /**
  targeting all previous siblings */
  [data-focus]:has(~ [data-focus]:focus-within) {
    opacity: 0.7;
    transform: scale(0.8);
    filter: blur(2px);
    z-index: 0;

    & > article {
      pointer-events: none;
    }
  }

  [data-focus]:focus-within > .reveal-card-content {
    display: flex;
    animation: revealY 0.2s var(--bezier);
    animation-fill-mode: forwards;
    margin-top: 30px;
  }
  @media (min-width: 640px) {
    [data-focus]:focus-within > .reveal-card-content {
      animation: revealX 0.2s var(--bezier);
      animation-fill-mode: forwards;
      margin-top: 0;
    }
  }
  /* } */

  @keyframes revealX {
    to {
      opacity: 1;
      transform: translateX(90%);
    }
  }

  @keyframes revealY {
    to {
      opacity: 1;
      transform: translateY(90%);
    }
  }

  @keyframes float {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-4px);
    }
    100% {
      transform: translateY(0);
    }
  }
  @keyframes fadeIn {
    to {
      opacity: 1;
      transform: scale(1);
      filter: blur(0);
    }
  }
</style>
<div
  data-focus
  tabindex="-1"
  class="w-full max-w-[250px] max-h-[200px] h-full flex items-center justify-center cursor-pointer z-40 transform-gpu select-none"
>
  <article
    class:list={["text-slate-900 dark:text-slate-100 w-full h-full relative", cardClass, article?.props?.class]}
    {...article?.props}
    data-is="card-article-wrapper"
    data-threshold={text?.threshold}
  >
    {
      title && !title?.icon && (
        <h2 class:list={["text-3xl", title.props?.class]} {...title.props}>
          {title.content}
        </h2>
      )
    }
    {
      title && title?.icon && (
        <div class="flex flex-col w-full justify-center items-center gap-2">
          <div
            data-is="header-card-icon"
            class:list={[
              "shadow-2xl shadow-black dark:shadow-white/50 overflow-hidden rounded-full",
              title.wrapperIconProps?.class,
            ]}
            {...title.wrapperIconProps}
          >
            <Image src={images[imgPath]()} alt="" {...(title?.iconProps as any)} />
          </div>
          <h2 class:list={["text-3xl", title.props?.class]} {...title.props}>
            {title.content}
          </h2>
        </div>
      )
    }
    {
      subtitle && (
        <small class:list={[subtitle.props?.class]} {...subtitle.props}>
          {subtitle.content}
        </small>
      )
    }
    {
      text && (
        <p
          class:list={["text-balance text-center", text.props?.class]}
          {...text.props}
          data-is="card-article-text"
          data-threshold={text?.threshold}
        >
          {text.content}
        </p>
      )
    }
    {(input || button) && <SegmentForm input={input} button={button} form={form} label={label} />}
  </article>
  <div
    class={`container-reveal h-full hidden w-full z-50 absolute reveal-card-content md:min-w-[400px] lg:min-w-[500px] gap-4 ${colorThemes[`${theme}`].title} ring-1 ring-stone-900/5 rounded-lg bg-gradient-to-b from-slate-300 to-slate-400 dark:from-slate-800 dark:to-slate-900 border-s-8 ${colorThemes[theme].titleBorder} p-6`}
  >
    <img
      src="https://picsum.photos/200/300"
      alt="tree"
      class="w-52 h-full max-h-[250px] aspect-[9/16] object-cover hidden rounded-lg shadow-lg"
    />
    <div class="flex flex-col items-center justify-evenly gap-3 h-full">
      <h3 class="text-2xl">Title here</h3>
      <p class="text-def-900 dark:text-def-100 text-balance text-center ps-2 text-[0.9rem] sm:text-[1rem]">
        {generateLorem(15)}
      </p>
      <Button className="font-bold text-md w-full" variant={"outline"}>S'inscrire</Button>
    </div>
  </div>
</div>
