---
import FallBackIcon from "@/assets/flat-trees/tree-1.png";
import { selectImage } from "@/helpers";
import { Image } from "astro:assets";
import type { SegmentProps } from "./Segment.astro";
import SegmentForm from "./SegmentForm.astro";

interface Props extends SegmentProps<"text"> {}
const {
  /**
   *
   *
   *
   *
   *
   *
   * FORM PROPS
   */
  input,
  button,
  form,
  label,
  /**
   *
   *
   *
   *
   *
   *
   * SHARED PROPS
   */
  title,
  subtitle,
  text,
  article,
  /**
   *
   *
   *
   *
   *
   *
   * CARD PROPS
   */
} = Astro.props;

const image = selectImage({
  bgName: title?.icon,
  fallback: FallBackIcon,
  extension: "png",
  folder: "flat-trees",
});

const cardClass =
  "backdrop-filter backdrop-blur-[2px] bg-gradient-to-b from-slate-300/90 to-slate-400/90 ring-2 dark:ring-slate-800/50 ring-slate-300/50 transition-all dark:from-slate-800/90 dark:to-slate-900/90 shadow-sm rounded-lg py-5";

const bezier = "cubic-bezier(.25,.75,.5,1.05)";

const duration = "0.5s";
---

<script>
  import { setupIntersectionObserver } from "@/helpers";
  // --
  const elements = Array.from(document.querySelectorAll("[data-is='card-article-wrapper']")) as HTMLElement[];
  const onIntersect = (element: HTMLElement) => element.classList.add("animate-fade-in-card");

  elements.map((element) => {
    setupIntersectionObserver({
      element,
      debugLog: "image",
      onIntersect: () => {
        onIntersect(element);
      },
      threshold: parseInt(element?.dataset?.threshold ?? "") || 0.5,
    });
  });
</script>

<style define:vars={{ bezier, duration }}>
  [data-is="card-article-wrapper"].animate-fade-in-card {
    animation: fadeIn var(--duration) var(--bezier);
    animation-fill-mode: forwards;
  }

  [data-is="card-article-wrapper"] {
    opacity: 0;
    transform: scale(0.95);
    filter: blur(4px);
  }

  @keyframes fadeIn {
    to {
      opacity: 1;
      transform: scale(1);
      filter: blur(0);
    }
  }
</style>

<div data-is="card-article-wrapper" class="w-full h-full flex items-center justify-center">
  <article
    class:list={["text-slate-900 dark:text-slate-100 w-full h-full relative", cardClass, article?.props?.class]}
    {...article?.props}
    data-threshold={text?.threshold || 0.5}
  >
    {
      title && !title?.icon && (
        <h2 class:list={["text-3xl", title.props?.class]} {...title.props}>
          {title.content}
        </h2>
      )
    }
    {
      title && title?.icon && (
        <div class="flex flex-col w-full justify-center items-center gap-5">
          <div
            data-is="header-card-icon"
            class:list={[
              "shadow-2xl shadow-black dark:shadow-white/50 overflow-hidden rounded-full",
              title.wrapperIconProps?.class,
            ]}
            {...title.wrapperIconProps}
          >
            {title.icon && (
              <Image
                src={image()}
                alt={title.iconProps?.alt || "little card icon"}
                class={title?.iconProps?.class || ""}
                class:list={title?.iconProps?.["class:list"] || ""}
              />
            )}
          </div>
          <h2 class:list={["text-3xl", title.props?.class]} {...title.props}>
            {title.content}
          </h2>
        </div>
      )
    }
    {
      subtitle && (
        <small class:list={[subtitle.props?.class]} {...subtitle.props}>
          {subtitle.content}
        </small>
      )
    }
    {
      text && (
        <p
          class:list={["text-balance text-center", text.props?.class]}
          {...text.props}
          data-is="card-article-text"
          data-threshold={text?.threshold}
        >
          {text.content}
        </p>
      )
    }
    {(input || button) && <SegmentForm input={input} button={button} form={form} label={label} />}
  </article>
</div>
