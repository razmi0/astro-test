---
import { Image } from "astro:assets";
import type { SegmentProps } from "./Segment.astro";
import SegmentForm from "./SegmentForm.astro";

interface Props extends SegmentProps<"text"> {}
const {
  /**
   *
   *
   *
   *
   *
   *
   * FORM PROPS
   */
  input,
  button,
  form,
  label,
  /**
   *
   *
   *
   *
   *
   *
   * SHARED PROPS
   */
  title,
  subtitle,
  text,
  theme = "light",
  article,
  /**
   *
   *
   *
   *
   *
   *
   * CARD PROPS
   */
} = Astro.props;

let imgPath = "";
let images: Record<
  string,
  () => Promise<{
    default: ImageMetadata;
  }>
> = {};

if (title?.icon) {
  imgPath = `/src/assets/flat-trees/${title?.icon}`;
  // import all images in the assets folder as a glob
  images = import.meta.glob<{ default: ImageMetadata }>("/src/assets/flat-trees/*.*");
  if (!images[imgPath]) throw new Error(`"${imgPath}" does not exist in glob: "/src/assets/flat-trees/*.*"`);
}

const cardClass =
  "backdrop-filter backdrop-blur-sm bg-gradient-to-b from-slate-300/90 to-slate-400/90 ring-2 dark:ring-slate-800/50 ring-slate-300/50 transition-all dark:from-slate-800/90 dark:to-slate-900/90 shadow-sm rounded-lg py-5";

const bezier = "cubic-bezier(.25,.75,.5,1.05)";

const duration = "0.5s";
---

<script>
  import { setupIntersectionObserver } from "@/helpers";
  // --
  const elements = Array.from(document.querySelectorAll("[data-is='card-article-wrapper']")) as HTMLElement[];
  const onIntersect = (element: HTMLElement) => element.classList.add("animate-fade-in-card");

  elements.map((element) => {
    setupIntersectionObserver({
      element,
      debugLog: "image",
      onIntersect: () => {
        onIntersect(element);
      },
      threshold: parseInt(element?.dataset?.threshold ?? "") || 0.5,
    });
  });
</script>

<style define:vars={{ bezier, duration }}>
  @keyframes float {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-6px);
    }
    100% {
      transform: translateY(0);
    }
  }
</style>

<article
  class:list={["text-slate-900 dark:text-slate-100 w-full h-full relative", cardClass, article?.props?.class]}
  {...article?.props}
  data-is="card-article-wrapper"
  data-threshold={text?.threshold}
>
  {
    title && !title?.icon && (
      <h2 class:list={["text-3xl", title.props?.class]} {...title.props}>
        {title.content}
      </h2>
    )
  }
  {
    title && title?.icon && (
      <div class="flex flex-col w-full justify-center items-center gap-5">
        <div
          data-is="header-card-icon"
          class:list={[
            "shadow-2xl shadow-black dark:shadow-white/50 overflow-hidden rounded-full",
            title.wrapperIconProps?.class,
          ]}
          {...title.wrapperIconProps}
        >
          <Image src={images[imgPath]()} alt="" {...(title?.iconProps as any)} />
        </div>
        <h2 class:list={["text-3xl", title.props?.class]} {...title.props}>
          {title.content}
        </h2>
      </div>
    )
  }
  {
    subtitle && (
      <small class:list={[subtitle.props?.class]} {...subtitle.props}>
        {subtitle.content}
      </small>
    )
  }
  {
    text && (
      <p
        class:list={["text-balance text-center", text.props?.class]}
        {...text.props}
        data-is="card-article-text"
        data-threshold={text?.threshold}
      >
        {text.content}
      </p>
    )
  }
  {(input || button) && <SegmentForm input={input} button={button} form={form} label={label} />}
</article>
