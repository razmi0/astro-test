---
import { cn } from "@/lib/utils";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import type { ImageNames } from "@/types";

interface Props {
  figure?: { content?: string; class?: string };
  img: { name: ImageNames; alt: string; class?: string };
  captionClass?: string;
}

const { figure, img, captionClass } = Astro.props;
const figureClasses = cn(
  "overflow-hidden rounded-none w-full h-full max-w-[400px] max-h-[400px] sm:rounded-lg hover-animation",
  figure?.class
);
const imgClasses = cn(
  "object-cover rounded-none w-full h-full aspect-[16/16] max-w-[400px] max-h-[400px] sm:rounded-lg opacity-0",
  img?.class
);

const imgPath = `/src/assets/${img.name}`;

const images = import.meta.glob<{ default: ImageMetadata }>("/src/assets/*.webp"); // src/assets/*.{webp}
if (!images[imgPath]) throw new Error(`"${imgPath}" does not exist in glob: "/src/assets/*.webp"`);

const bezier = "cubic-bezier(.25,.75,.5,1.25)";
const duration = "0.3s";
---

<Fragment>
  <style define:vars={{ bezier, duration }}>
    .hover-animation {
      transition:
        transform var(--duration) var(--bezier),
        filter var(--duration) var(--bezier);
    }

    .hover-animation:hover {
      transform: scale(1.05);
      filter: brightness(1.1);
    }

    .animate-fade-in-image {
      animation: fade-in-image 0.8s;
      animation-fill-mode: forwards;
    }

    @keyframes fade-in-image {
      0% {
        transform: scale(0.98);
        opacity: 0;
      }
      100% {
        transform: scale(1);
        opacity: 1;
      }
    }
  </style>
  <script>
    import { setupIntersectionObserver } from "@/helpers";

    const elements = Array.from(
      document.querySelectorAll("img[data-anim='animate-fade-in-image']")
    ) as HTMLImageElement[];
    const onIntersect = (element: HTMLElement) => {
      element.classList.add("animate-fade-in-image");
    };
    const onDisappear = (element: HTMLElement) => {};

    elements.map((element) => {
      setupIntersectionObserver({
        element,
        debugLog: `Image : ${element.src}`,
        onIntersect: () => {
          onIntersect(element);
        },
        onDisappear: () => {
          onDisappear(element);
        },
        threshold: 0.5,
      });
    });
  </script>
  <div class="overflow-hidden rounded-none md:rounded-lg min-w-fit">
    <figure class:list={[figureClasses]}>
      <Image src={images[imgPath]()} alt={img.alt} class:list={[imgClasses]} data-anim="animate-fade-in-image" />
      {figure && figure.content && <figcaption class:list={["", captionClass]}>{figure.content}</figcaption>}
    </figure>
  </div>
</Fragment>
