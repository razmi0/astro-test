---
import { cn } from "@/lib/utils";

interface Props {
  figure?: { content?: string; class?: string };
  img: { src?: string; alt: string; class?: string };
  captionClass?: string;
}

const { figure, img, captionClass } = Astro.props;
const classes = cn("overflow-hidden h-[500px] w-[400px]", figure?.class);
---

<Fragment>
  <style>
    img:hover {
      transform: scale(1.1);
      filter: brightness(1.1);
      transition-property: transform, filter;
      transition-duration: 0.5s;
      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    }
    img {
      transition-property: transform, filter;
      transition-duration: 0.5s;
      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    }

    .animate-fade-in-image {
      animation: fade-in-image 0.8s;
      animation-fill-mode: forwards;
    }
    @keyframes fade-in-image {
      0% {
        transform: scale(0.98);
        opacity: 0;
      }
      100% {
        transform: scale(1);
        opacity: 1;
      }
    }
  </style>
  <script>
    import { setupIntersectionObserver } from "@/helpers";

    const elements = Array.from(document.querySelectorAll("img[data-anim='animate-fade-in-image']")) as HTMLElement[];
    const onIntersect = (element: HTMLElement) => {
      element.classList.add("animate-fade-in-image");
    };

    elements.map((element) => {
      setupIntersectionObserver({
        element,
        debugLog: "image",
        onIntersect: () => {
          onIntersect(element);
        },
        threshold: 1,
      });
    });
  </script>
  <figure class:list={[classes]}>
    <img
      src={img.src ?? "https://source.unsplash.com/random/400x400"}
      alt={img.alt}
      class:list={["object-cover w-full h-full rounded-lg opacity-0", img.class]}
      data-anim="animate-fade-in-image"
    />
    {figure && figure.content && <figcaption class:list={["", captionClass]}>{figure.content}</figcaption>}
  </figure>
</Fragment>
