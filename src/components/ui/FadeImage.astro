---
import { cn } from "@/lib/utils";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import type { ImageProps } from "@/types";

interface Props extends ImageProps {}

const { figCaption, figure, img } = Astro.props;

const figureClass = cn(
  "overflow-hidden  w-full h-full max-w-[400px] max-h-[400px] rounded-full hover-animation",
  figure?.props?.class
);

const imgClass = cn(
  "object-cover w-full h-full aspect-[16/16] max-w-[400px] max-h-[400px] opacity-0 rounded-full",
  img?.props?.class
);

const captionClass = cn("text-center text-sm text-gray-500", figCaption?.props?.class);

const imgPath = `/src/assets/${img?.name}`;

// import all images in the assets folder as a glob
const images = import.meta.glob<{ default: ImageMetadata }>("/src/assets/*.webp");
if (!images[imgPath]) throw new Error(`"${imgPath}" does not exist in glob: "/src/assets/*.webp"`);

const bezier = "cubic-bezier(.25,.75,.5,1.25)";
const duration = "0.3s";
---

<Fragment>
  <style define:vars={{ bezier, duration }}>
    .hover-animation {
      transition:
        transform var(--duration) var(--bezier),
        filter var(--duration) var(--bezier);
    }

    .hover-animation:hover {
      transform: scale(1.05);
      filter: brightness(1.1);
    }

    .animate-fade-in-image {
      animation: fade-in-image 0.8s;
      animation-fill-mode: forwards;
    }

    @keyframes fade-in-image {
      0% {
        transform: scale(0.98);
        opacity: 0;
      }
      100% {
        transform: scale(1);
        opacity: 1;
      }
    }
  </style>
  <script>
    import { setupIntersectionObserver } from "@/helpers";

    const elements = Array.from(
      document.querySelectorAll("img[data-anim='animate-fade-in-image']")
    ) as HTMLImageElement[];
    const onIntersect = (element: HTMLElement) => {
      element.classList.add("animate-fade-in-image");
    };

    elements.map((element) => {
      setupIntersectionObserver({
        element,
        debugLog: `Image : ${element.src}`,
        onIntersect: () => {
          onIntersect(element);
        },
        threshold: 0.5,
      });
    });
  </script>
  <div class="overflow-hidden min-w-fit rounded-full">
    <figure class:list={[figureClass]}>
      {
        /**
         *
         * ...img?.props as any
         * astro assets image lib need more investigation
         *
         */
      }
      <Image
        src={images[imgPath]()}
        class:list={[imgClass]}
        data-anim="animate-fade-in-image"
        alt={img?.props?.alt || ""}
        {...img?.props as any}
      />
      {figCaption && <figcaption class:list={[captionClass]}>{figCaption?.content}</figcaption>}
    </figure>
  </div>
</Fragment>
