---
import HeroImage from "@/assets/hero/hero-29.png";
import { Button } from "@/components/ui/Button";
import { generateLorem } from "@/helpers";
import { Image } from "astro:assets";
import Title from "./Title.astro";
import Curve from "@/assets/tiles/curve.jpg";
// npx astro add tailwind
// npx astro add react
interface Props {
  hrefs: [string, string];
}

const { hrefs } = Astro.props;
---

<script>
  import { drawLine } from "@/helpers";
  window.addEventListener("DOMContentLoaded", () => {
    const cardImage = document.querySelector('[data-is="card-image"]')!;
    const focusedTree = document.querySelector('[data-is="focused-tree"]')!;
    const focusedCanvas = document.querySelector('[data-is="focused-canvas"]') as HTMLCanvasElement;
    const ctx = focusedCanvas.getContext("2d")!;

    const xCardOffset = 5;
    const terminalLineSize = 10;

    const data = {
      update: function () {
        this.canvas = { w: window.innerWidth, h: window.innerHeight };
        focusedCanvas.width = this.canvas.w;
        focusedCanvas.height = this.canvas.h;
        this.card = {
          x: cardImage.getBoundingClientRect().right + xCardOffset,
          y: cardImage.getBoundingClientRect().bottom - cardImage.getBoundingClientRect().height / 2,
        };
        this.tree = {
          x: focusedTree.getBoundingClientRect().left + focusedTree.getBoundingClientRect().width / 2,
          y: focusedTree.getBoundingClientRect().top,
        };
        this.terminalLine = {
          1: { x: this.card.x, y: this.card.y - terminalLineSize },
          2: { x: this.card.x, y: this.card.y + terminalLineSize },
        };
        return this;
      },
      canvas: { w: 0, h: 0 },
      card: { x: 0, y: 0 },
      tree: { x: 0, y: 0 },
      terminalLine: { 1: { x: 0, y: 0 }, 2: { x: 0, y: 0 } },
    };

    data.update();

    const drawLineProps = {
      coordOne: data.card,
      coordTwo: data.tree,
      color: "#ffffff99",
      stroke: 1.2,
      ctx,
    };

    const drawTerminalLineProps = {
      coordOne: data.terminalLine[1],
      coordTwo: data.terminalLine[2],
      color: "#ffffff99",
      stroke: 1.2,
      ctx,
    };

    drawLine(drawLineProps);
    drawLine(drawTerminalLineProps);

    window.addEventListener("resize", () => {
      const updated = data.update();
      drawLine({ ...drawLineProps, coordOne: updated.card, coordTwo: updated.tree });
      drawLine({ ...drawTerminalLineProps, coordOne: updated.terminalLine[1], coordTwo: updated.terminalLine[2] });
    });
  });
</script>

<section class="relative w-full max-h-screen h-screen vertical center px-11 pt-36 pb-24">
  <Image src={Curve} alt="" class="absolute -z-10 top-0 left-0 w-full h-full object-cover" />
  <canvas data-is="focused-canvas" class="z-20 top-0 absolute pointer-events-none"></canvas>
  <div class="horizontal w-full h-full">
    <div class="w-full h-full vertical items-start justify-between">
      <!--  TOP ELEMENTS -->
      <!--  TOP ELEMENTS -->
      <!--  TOP ELEMENTS -->
      <!--  TOP ELEMENTS -->
      <!--  TOP ELEMENTS -->
      <aside
        class="w-full h-fit font-bold text-md im-fell-dw-pica-regular dark:text-white/90 text-dark/90 text-left text-balance"
      >
        <ul class="grid grid-cols-3 w-full leading-3 horizontal [&>li]:max-w-[10ch] h-fit list-disc ps-7">
          <li class="marker:text-4xl marker:text-pur-600">Nature</li>
          <li class="marker:text-6xl marker:text-pur-400">Respect</li>
          <li class="marker:text-8xl marker:text-pur-500">Sport</li>
        </ul>
      </aside>

      <div class="vertical gap-12">
        <Title />

        <!-- BUTTON -->
        <!-- BUTTON -->
        <!-- BUTTON -->
        <!-- BUTTON -->
        <!-- BUTTON -->
        <div class="[&>a]:w-fit text-black w-full horizontal gap-12">
          <a href={hrefs[0]}>
            <Button size={"xl"} variant="hero" className="bg-pur-600 dark:bg-pur-600">DÃ©couvrir</Button>
          </a>
          <a href={hrefs[1]}>
            <Button size={"xl"} variant="hero" className="bg-pur-400 dark:bg-pur-400">S'inscrire</Button>
          </a>
        </div>
      </div>
      <article class="horizontal gap-12 w-full">
        <p class="max-w-[25ch] text-black/90 dark:text-white/90 text-[1rem] md:text-[1.1rem] line-clamp-3">
          {generateLorem(5)}
          <span class="text-pur-500">{generateLorem(2)}</span>
          {generateLorem(5)}
        </p>
        <p class="max-w-[25ch] text-black/90 dark:text-white/90 text-[1rem] md:text-[1.1rem] line-clamp-3">
          {generateLorem(5)}
          <span class="text-pur-400">{generateLorem(2)}</span>
          {generateLorem(5)}
        </p>
      </article>
    </div>
    <!-- CARD IMAGE -->
    <!-- CARD IMAGE -->
    <!-- CARD IMAGE -->
    <!-- CARD IMAGE -->
    <!-- CARD IMAGE -->
    <!-- CARD IMAGE -->
    <div class="relative w-8/12 h-full">
      <div class="absolute h-1/4 w-48 z-10 top-[10%] -translate-x-[50%] group/card" data-is="card-image">
        <article class="h-full card">
          <Image
            src={HeroImage}
            alt="a tree in a middle of a clear hill"
            class="h-full w-full object-cover"
            data-style="dark-bg"
          />
          <div data-style="light-border"></div>
        </article>
      </div>
      <!-- IMAGE -->
      <!-- IMAGE -->
      <!-- IMAGE -->
      <!-- IMAGE -->
      <!-- IMAGE -->
      <!-- IMAGE -->

      <figure class="h-full me-10 card">
        <div class="absolute bottom-0 h-full w-full">
          <div
            class="h-24 w-24 rounded-full ring-2 ring-white/50 bottom-[10.4rem] absolute right-1/2 translate-x-[3.7rem]"
            data-is="focused-tree"
          >
          </div>
        </div>
        <Image
          src={HeroImage}
          alt="a tree in a middle of a clear hill"
          class={"aspect-[9/16] h-full w-full object-cover rounded-xl -z-10"}
          data-style="dark-bg"
        />
        <div data-style="light-border"></div>
      </figure>
    </div>
  </div>
</section>
