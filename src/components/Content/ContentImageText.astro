---
import FadeImage from "@/components/ui/FadeImage.astro";
import type { ContentProps } from "./Content.astro";
import ContentForm from "./ContentForm.astro";
import colorThemes from "@/components/ui/Color/data";

interface Props extends ContentProps<"image-text"> {}

const {
  /**
   *
   *
   *
   *
   *
   *
   * FORM PROPS
   */
  input,
  button,
  form,
  label,
  /**
   *
   *
   *
   *
   *
   *
   * SHARED PROPS
   */
  title,
  subtitle,
  text,
  theme = "light",
  article,
  /**
   *
   *
   *
   *
   *
   *
   *
   * IMAGE PROPS
   */
  img,
  figure,
  figCaption,
} = Astro.props;

const defaultArticleClass = "flex justify-evenly items-center text-slate-900 dark:text-slate-100 gap-16 md:gap-12";
---

<script>
  import { setupIntersectionObserver } from "@/helpers";
  // --
  const elements = Array.from(document.querySelectorAll("[data-is='card']")) as HTMLElement[];
  const onIntersect = (element: HTMLElement) => {
    element.classList.add("animate-fade-in-card");
  };

  elements.map((element) => {
    setupIntersectionObserver({
      element,
      debugLog: "image",
      onIntersect: () => {
        onIntersect(element);
      },
      threshold: parseInt(element?.dataset?.threshold ?? "") || 0.5,
    });
  });
</script>

<style>
  .animate-fade-in-card {
    animation: fadeIn 0.5s ease-in-out;
    animation-fill-mode: forwards;
  }
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(30px);
      filter: blur(2px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
      filter: blur(0);
    }
  }
</style>

<article class:list={[defaultArticleClass, article?.props?.class]} {...article?.props}>
  <FadeImage img={img} figure={figure} figCaption={figCaption} />
  <div
    class:list={"flex flex-col opacity-0 gap-8 max-w-[400px] md:w-full"}
    data-is="card"
    data-threshold={text?.threshold}
  >
    <div class:list={["flex flex-col gap-3 border-s-8 ps-5 ms-5 md:ms-0", colorThemes[theme].titleBorder]}>
      {
        title && (
          <h3 class:list={["max-w-1/2 text-2xl", title.props?.class]} {...title.props}>
            {title.content}
          </h3>
        )
      }
      {
        subtitle && (
          <small class:list={[subtitle.props?.class]} {...subtitle.props}>
            {subtitle.content}
          </small>
        )
      }
    </div>
    {
      text && (
        <p class:list={["text-balance ps-2 text-[0.9rem] sm:text-[1rem]", text.props?.class]} {...text.props}>
          {text.content}
        </p>
      )
    }
    {(input || button) && <ContentForm input={input} button={button} form={form} label={label} />}
  </div>
</article>
