---
import Separator from "@/components/ui/Separator.astro";
import type { Prettify } from "@/types";
import type { ComponentProps } from "astro/types";
import colorThemes from "@/components/ui/Color/data";

interface Props {
  theme: "light" | "dark";
  wrapper: {
    name?: string;
    className?: string;
    threshold?: number;
    size?: "fullQuarter" | "full" | "threeQuarter" | "half" | "third" | "quarter" | "none";
    id?: string;
  };
  titleWrapper?: {
    className?: string;
  };
  title?: {
    text: string;
    className?: string;
    startingPos?: string;
    endingPos?: string;
    name?: string;
    direction?: "rtl" | "ltr";
  };
  subtitle?: {
    name: string;
    startingPos?: string;
    endingPos?: string;
    separator?: {
      props: ComponentProps<typeof Separator>;
    };
    text: {
      className?: string;
      content: string;
    };
  };
  children?: any;
}

export type ScreenUnitProps = Prettify<Props>;

const { title, titleWrapper, subtitle, wrapper, theme } = Astro.props;

// -- Theme
// --

const sizes = {
  fullQuarter: "125vh",
  full: "100vh",
  threeQuarter: "75vh",
  half: "50vh",
  third: "33vh",
  quarter: "25vh",
  none: "auto",
};

// -- Animation
// --

const directions = {
  ltr: {
    startingPos: "-100vw",
    endingPos: "0",
  },
  rtl: {
    startingPos: "100vw",
    endingPos: "0",
  },
};

const titleStartingPos = title?.startingPos || directions[title?.direction || "ltr"].startingPos;
const titleEndingPos = title?.endingPos || directions[title?.direction || "ltr"].endingPos;
const subtitleStartingPos = subtitle?.startingPos || directions[title?.direction || "ltr"].startingPos;
const subtitleEndingPos = subtitle?.endingPos || directions[title?.direction || "ltr"].endingPos;

const bezier = "cubic-bezier(.25,.75,.5,1.05)";
---

<script>
  import { setupIntersectionObserver } from "@/helpers";

  // --
  type ElementNamedType<T, P> = P & { dataset: { name: T } };
  type GroupedByName<T> = [ElementNamedType<T, HTMLElement>, ElementNamedType<T, HTMLElement>[]];

  // --
  const wrappers = Array.from(document.querySelectorAll("[data-is='screen-unit-wrapper'][data-name]")) as HTMLElement[];
  const titles = Array.from(document.querySelectorAll("[data-is='title'][data-name]")) as HTMLElement[];

  const groupedObservers: GroupedByName<string>[] = wrappers.reduce((acc: GroupedByName<string>[], cur) => {
    let temp = [cur, []] as [any, any[]];
    titles.forEach((title) => title.dataset.name === cur.dataset.name && temp[1].push(title));
    if (temp[1].length > 0) acc.push(temp);
    return acc;
  }, []);

  const onIntersect = (titleElement: HTMLElement) => {
    const animationType = titleElement.dataset.animate;
    animationType && titleElement.classList.add(animationType);
  };
  const onDisappear = (titleElement: HTMLElement) => {
    const animationType = titleElement.dataset.animate;
    animationType && titleElement.classList.remove(animationType);
  };

  groupedObservers.forEach((group) => {
    if (!group[1] || !group[0])
      console.warn(`[ERROR] : wrapper : ${group[0].id} , title : ${group[1].map((g) => g.dataset.name)}`);
    else if (group[1].length > 0 && group[0]) {
      group[1].forEach((title) => {
        setupIntersectionObserver({
          element: group[0],
          debugLog: `debug-obs-title-${group[0].id}`,
          threshold: parseInt(group[0].dataset.threshold || "") || 0.4,
          onIntersect: () => onIntersect(title),
          onDisappear: () => onDisappear(title),
        });
      });
    }
  });
</script>

<style define:vars={{ bezier, titleStartingPos, titleEndingPos, subtitleStartingPos, subtitleEndingPos }}>
  [data-animate] {
    opacity: 0;
    filter: blur(2px);
    transition:
      transform 0.5s var(--bezier),
      opacity 0.5s var(--bezier),
      filter 0.5s var(--bezier),
      scale 0.5s var(--bezier);
  }

  [data-animate="animate-slide-in"] {
    transform: translateX(var(--titleStartingPos)) scale(0.9);
  }

  [data-animate="animate-slide-in"].animate-slide-in {
    filter: blur(0);
    transform: translateX(var(--titleEndingPos)) scale(1);
    opacity: 1;
  }

  [data-animate="animate-fade-in"] {
    transform: translateY(var(--subtitleStartingPos)) scale(0.9);
  }

  [data-animate="animate-fade-in"].animate-fade-in {
    filter: blur(0);
    transform: translateY(var(--subtitleEndingPos)) scale(1);
    opacity: 1;
  }
</style>

<div
  class:list={[
    "ps-0 pe-0 pt-12 sm:ps-6 sm:pe-6 md:ps-12 md:pe-12 md:pt-12 border-none",
    { "flex-col": subtitle },
    wrapper?.className,
  ]}
  data-is="screen-unit-wrapper"
  data-threshold={wrapper.threshold || 0.4}
  data-name={wrapper.name}
  style={{ minHeight: sizes[wrapper.size || "full"] }}
  id={wrapper.id || ""}
>
  {
    title && (
      <div class:list={["w-full flex items-center h-24", titleWrapper?.className]}>
        <h2
          class:list={["opacity-0 text-3xl sm:text-4xl", colorThemes[theme].title, title?.className]}
          data-is="title"
          data-name={title.name}
          data-animate="animate-slide-in"
        >
          {title.text}
        </h2>
      </div>
    )
  }
  {
    subtitle && (
      <>
        {subtitle.separator ? (
          <div
            class="flex flex-row place-items-center w-full"
            data-name={subtitle.name}
            data-is="title"
            data-animate="animate-fade-in"
          >
            <Separator {...subtitle.separator.props} class=`${colorThemes[theme].separator} px-2` />
            <h4 class:list={["text-lg text-center", colorThemes[theme].title, subtitle.text.className]}>
              {subtitle.text.content}
            </h4>
            <Separator {...subtitle.separator.props} class=`${colorThemes[theme].separator} px-2` />
          </div>
        ) : (
          <h4
            class:list={["text-lg text-center", colorThemes[theme].title, subtitle.text.className]}
            data-name={subtitle.name}
            data-is="title"
            data-animate="animate-fade-in"
          >
            {subtitle.text.content}
          </h4>
        )}
      </>
    )
  }
  <slot />
</div>
