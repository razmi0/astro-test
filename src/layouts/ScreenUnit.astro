---
import { cn } from "@/lib/utils";
import type { Prettify } from "@/types";

interface Props {
  theme: "light" | "dark";
  wrapper: {
    name?: string;
    className?: string;
    threshold?: number;
    size?: "full" | "half" | "quarter";
  };
  title?: {
    text: string;
    className?: string;
    startingPos?: string;
    endingPos?: string;
    name?: string;
    direction?: "rtl" | "ltr";
  };
  children?: any;
}

export type ScreenUnitProps = Prettify<Props>;

const { title, wrapper, theme } = Astro.props;

// -- Theme
// --

const themes = {
  light: {
    container: "bg-slate-300 dark:bg-slate-800",
  },
  dark: {
    container: "bg-slate-400 dark:bg-slate-900",
  },
};

const sizes = {
  full: "100vh",
  half: "50vh",
  quarter: "25vh",
};

// -- Animation
// --

const directions = {
  ltr: {
    startingPos: "-100vw",
    endingPos: "0",
  },
  rtl: {
    startingPos: "100vw",
    endingPos: "0",
  },
};

const startingPos = title?.startingPos || directions[title?.direction || "ltr"].startingPos;
const endingPos = title?.endingPos || directions[title?.direction || "ltr"].endingPos;
const bezier = "cubic-bezier(.25,.75,.5,1.05)";
---

<script>
  import { setupIntersectionObserver } from "@/helpers";

  // --
  type ElementNamedType<T, P> = P & { dataset: { name: T } };
  type GroupedByName<T> = [ElementNamedType<T, HTMLElement>, ElementNamedType<T, HTMLHeadingElement>];

  // --
  const wrappers = Array.from(document.querySelectorAll("[data-is='wrapper'][data-name]")) as HTMLElement[];
  const titles = Array.from(document.querySelectorAll("[data-is='title'][data-name]")) as HTMLHeadingElement[];

  const groupedObservers: GroupedByName<string>[] = wrappers.reduce((acc: GroupedByName<string>[], cur) => {
    const title = titles.find((title) => title.dataset.name === cur.dataset.name);
    if (title) acc.push([cur, title] as GroupedByName<string>);
    return acc;
  }, []);

  const onIntersect = (titleElement: HTMLHeadingElement) => titleElement.classList.add("animate-slide-in");
  const onDisappear = (titleElement: HTMLHeadingElement) => titleElement.classList.remove("animate-slide-in");
  groupedObservers.forEach((group) => {
    if (!group[1] || !group[0])
      console.warn(`[ScreenUnit ${group[0].id} not defined] : wrapper : ${group[0]} , title : ${group[1]}`);
    if (group[1] && group[0]) {
      setupIntersectionObserver({
        element: group[0],
        debugLog: `debug-obs-title-${group[0].id}`,
        threshold: parseInt(group[0].dataset.threshold || "") || 0.4,
        onIntersect: () => onIntersect(group[1]),
        onDisappear: () => onDisappear(group[1]),
      });
    }
  });
</script>

<style define:vars={{ bezier, startingPos, endingPos }}>
  h2 {
    opacity: 0;
    filter: blur(2px);
    transform: translateX(var(--startingPos)) scale(0.9);
    transition:
      transform 0.5s var(--bezier),
      opacity 0.5s var(--bezier),
      filter 0.5s var(--bezier),
      scale 0.5s var(--bezier);
  }

  h2.animate-slide-in {
    filter: blur(0);
    transform: translateX(var(--endingPos)) scale(1);
    opacity: 1;
  }
</style>

<section
  class:list={[
    wrapper?.className,
    themes[theme].container,
    "ps-0 pe-0 pt-12 sm:ps-6 sm:pe-6 md:ps-12 md:pe-12 md:pt-12 border-none",
  ]}
  data-is="wrapper"
  data-threshold={wrapper.threshold || 0.4}
  data-name={wrapper.name}
  style={{ minHeight: sizes[wrapper.size || "full"] }}
>
  {
    title && (
      <div class:list={["w-full flex items-center justify-center md:justify-end h-24"]}>
        <h2
          class:list={["opacity-0 dark:text-defs-100 text-defs-100 text-3xl sm:text-4xl", title?.className]}
          data-is="title"
          data-name={title.name}
        >
          {title.text}
        </h2>
      </div>
    )
  }
  <slot />
</section>
