---
import Spacer from "@/components/ui/Spacer.astro";
import NavDesktop from "@/components/Nav/Desktop";
import NavMobile from "@/components/Nav/Mobile";
import { ModeToggle } from "../components/ui/ModeToggle";
import Logo from "@/components/ui/Logo.astro";

const currentPath = Astro.url.pathname;

const headerClassMobile = [
  // BASE
  "flex md:hidden px-3 items-center justify-center w-full fixed z-50 top-0 left-0 h-24 me-4 border-b-white bg-gradient-to-b",
  // DARK
  "dark:from-slate-800 dark:to-slate-900",
  // LIGHT
  "from-slate-400 to-slate-300",
].join(" ");

const headerClassDesktop = [
  // BASE
  "hidden md:flex px-3 items-center justify-center w-full fixed z-50 top-0 left-0 h-20 border-b-white bg-gradient-to-b",
  // DARK
  "dark:from-slate-800 dark:to-slate-900",
  // LIGHT
  "from-slate-400 to-slate-300",
].join(" ");
---

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ["class"] });
  }
</script>

<script>
  import { actOnMedia } from "@/helpers";

  const desktopHeader = document.querySelector("header[data-media='desktop']");
  const mobileHeader = document.querySelector("header[data-media='mobile']");
  const parentNode = document.querySelector("header")?.parentNode!;

  const onMobile = () =>
    parentNode && mobileHeader && desktopHeader && parentNode.replaceChild(mobileHeader, desktopHeader);
  const onDesktop = () =>
    parentNode && mobileHeader && desktopHeader && parentNode.replaceChild(desktopHeader, mobileHeader);

  actOnMedia("md", onDesktop, onMobile);
</script>

<header data-media="desktop" class:list={[headerClassDesktop]}>
  <Logo src="/logo.webp" imgClasses="rounded-full" figureClasses="h-16 w-16 " />
  <Spacer />
  <NavDesktop client:idle currentPath={currentPath} />
  <ModeToggle client:idle />
</header>

<header data-media="mobile" class:list={[headerClassMobile]}>
  <NavMobile client:idle currentPath={currentPath} />
  <Spacer />
  <Logo src="/logo.webp" imgClasses="rounded-full" figureClasses="h-12 w-12 sm:h-16 sm:w-16" />
</header>
